/**
 * Original source: https://github.com/udecode/slate-plugins/blob/next/packages/slate-plugins/src/serializers/serialize-html/serializeHTMLFromNodes.ts
 */

import React from 'react';
import { renderToStaticMarkup } from 'react-dom/server';
import { Text as SlateText } from 'slate';
import { Element as EditorElement, Leaf as EditorLeaf } from '../editor/render';

// Remove extra whitespace generated by ReactDOMServer
const trimWhitespace = (rawHtml) => rawHtml.replace(/(\r\n|\n|\r|\t)/gm, '');

// Remove redundant data attributes
const stripSlateDataAttributes = (rawHtml) =>
  rawHtml
    .replace(/( data-slate)(-node|-type)="[^"]+"/gm, '')
    .replace(/( data-testid)="[^"]+"/gm, '');

// TODO: We might also want to remove generated classes in the future.

const getNode = (elementProps, plugins) => {
  const element = <EditorElement {...elementProps} />;
  return renderToStaticMarkup(element);
};

const getLeaf = (leafProps, plugins) => {
  const leaf = <EditorLeaf {...leafProps} />;
  return renderToStaticMarkup(leaf);
};

/**
 *
 * @param plugins
 */
export const serializeHTMLFromNodes = (plugins) => (nodes) => {
  const result = nodes
    .map((node) => {
      if (SlateText.isText(node)) {
        return getLeaf(
          {
            leaf: node,
            text: node,
            children: node.text,
            attributes: { 'data-slate-leaf': true },
          },
          plugins,
        );
      }
      return getNode(
        {
          element: node,
          children: encodeURIComponent(
            serializeHTMLFromNodes(plugins)(node.children),
          ),
          attributes: { 'data-slate-node': 'element', ref: null },
        },
        plugins,
      );
    })
    .join('');
  return stripSlateDataAttributes(trimWhitespace(decodeURIComponent(result)));
};
